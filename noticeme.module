<?php
/**
 * @file
 * Adds a field (called social media) for displaying facebook, google+ and
 * twitter buttons and adds open graph as well as http://schema.org metadata
 * to the html header.
 */

module_load_include('inc', 'noticeme', '/noticeme.field');
module_load_include('inc', 'noticeme', '/noticeme.forms');

/**
 * Implements hook_init().
 * Add noticeme.js and write social media data into page head.
 */
function noticeme_init() {
  global $language;
  drupal_add_css(drupal_get_path('module', 'noticeme') . '/noticeme.css');
  drupal_add_js(drupal_get_path('module', 'noticeme') . '/js/noticeme.js');
  drupal_add_js(array('noticeme' => array('languages' => array(
    'facebook' => variable_get('noticeme_' . $language->language . '_facebook', 'en_US'),
    'google' => variable_get('noticeme_' . $language->language . '_google', 'en-US'),
    'twitter' => variable_get('noticeme_' . $language->language . '_twitter', 'en'),
  ))), 'setting');
  $metadata = noticeme_page_metadata();
  $headers = array();
  $headers[] = array('property' => 'og:title', 'content' => @$metadata['title']);
  $headers[] = array('property' => 'og:url', 'content' => @$metadata['url']);
  $headers[] = array('property' => 'og:image', 'content' => @$metadata['image']);
  $headers[] = array('property' => 'og:description', 'content' => @$metadata['description']);
  $headers[] = array('property' => 'og:type', 'content' => @$metadata['og_type']);
  $headers[] = array('property' => 'og:site_name', 'content' => variable_get('site_name'));

  if (strlen(trim(variable_get('noticeme_fb_admins'))) > 0) {
    $headers[] = array(
      'property' => 'og:admins',
      'content' => variable_get('noticeme_fb_admins'),
    );
  }
  if (strlen(trim(variable_get('noticeme_fb_appid'))) > 0) {
    $headers[] = array(
      'property' => 'og:admins',
      'content' => variable_get('noticeme_fb_appid'),
    );
  }
  $headers[] = array('itemprop' => 'name', 'content' => $metadata['title']);
  $headers[] = array('itemprop' => 'description', 'content' => $metadata['description']);
  foreach ($headers as $key => $header) {
    drupal_add_html_head(array(
      '#tag' => 'meta',
      '#attributes' => $header,
    ), 'noticeme_' . $key);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function noticeme_preprocess_html(&$vars) {
  $metadata = noticeme_page_metadata();
  if ($type = @$metadata['schema_type']) {
    $vars['rdf_namespaces'] .= ' itemscope itemtype="http://schema.org/' . $type . '"';
  }
}

/**
 * Implements hook_menu().
 */
function noticeme_menu() {
  return array(
    'admin/config/search/noticeme' => array(
      'title' => 'Noticeme',
      'description' => 'Configure global settings for social media buttons.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('noticeme_admin_settings'),
      'file' => 'noticeme.admin.inc',
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function noticeme_theme() {
  return array(
    //theme facebook like button
    'facebook_like' => array(
      'variables' => array(
        'href' => FALSE,
        'layout' => 'box_count',
        'send' => 0,
        'show-faces' => 0,
        'action' => 0,
        'colorscheme' => 'light',
        'font' => 'lucida grande',
      ),
      'file' => 'noticeme.theme.inc',
    ),
    //theme google+ button
    'google_plus' => array(
      'variables' => array(
        'href' => FALSE,
        'size' => 'medium',
        'annotation' => 'info',
      ),
      'file' => 'noticeme.theme.inc',
    ),
    //theme twitter button
    'twitter_tweet' => array(
      'variables' => array(
        'url' => FALSE,
        'text' => '',
        'count' => 'show',
        'via' => '',
        'size' => 'small',
        'related' => '',
        'hashtags' => '',
      ),
      'file' => 'noticeme.theme.inc',
    ),
    //theme the languages table used in the noticeme settings page
    //under admin/config/search/noticeme
    'noticeme_languages' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Build social media metadata for current page/url.
 *
 * Uses data from noticeme_site_metadata() as default, overrides it with data extracted
 * from the entity, data stored in noticeme fields and finally
 * hook_noticeme_field_metadata_alter().
 *
 * @return
 *   An array with global social media metadata.
 *   See noticeme_get_metadata_from_entity_noticeme_field() for details.
 */
function noticeme_page_metadata() {
  $metadata = &drupal_static(__FUNCTION__);
  if (!isset($metadata)) {
    $menu_item = menu_get_item();

    //default to global values and override with metadata extracted from the entity
    $metadata = array_merge(noticeme_site_metadata(), noticeme_entity_metadata($menu_item));
    //let other modules extract metadata from entity types they define
    drupal_alter('noticeme_entity_metadata', $metadata, $menu_item);

    //override with metadata stored in the entity's noticeme field
    $metadata = array_merge($metadata, noticeme_field_metadata($menu_item));
    //let other modules set metadata for noticeme fields that are attached to entity types they define
    drupal_alter('noticeme_field_metadata', $metadata, $menu_item);
  }
  return $metadata;
}

/**
 * Collects site-global social media metadata.
 *
 * This data will be overridden by data stored in entities and data stored in
 * noticeme fields.
 *
 * @return
 *   An array with global social media metadata.
 *   See noticeme_get_metadata_from_entity_noticeme_field() for details.
 */
function noticeme_site_metadata() {
  $metadata = array();
  $metadata['url'] = url(request_path(), array('absolute' => TRUE));
  $metadata['title'] = variable_get('site_name');
  $metadata['description'] = variable_get('site_slogan');
  if (strlen(theme_get_setting('logo_path')) > 0) {
    $metadata['image'] = file_create_url(theme_get_setting('logo_path'));
  }
  else {
    $metadata['image'] = FALSE;
  }

  //let other modules alter global metadata
  drupal_alter('noticeme_site_metadata', $metadata);
  return $metadata;
}

/**
 * Build social media metadata from data stored in the entity.
 *
 * Collects metadata from predefined entities. For custom entity types implement
 * hook_noticeme_entity_metadata_alter() which is called after this function.
 * @see noticeme_page_metadata().

 * @param $menu_item
 *   The current page's menu router item.
 *
 * @return
 *   An array with global social media metadatarmation.
 *   See noticeme_get_metadata_from_entity_noticeme_field() for details.
 */
function noticeme_entity_metadata($menu_item) {
  switch($menu_item['page_callback']) {
    case 'node_page_view':
      $page_metadata = noticeme_get_metadata_from_predefined_entity_data('node', $menu_item['page_arguments'][0]);
      break;

    case 'comment_permalink':
      $page_metadata = noticeme_get_metadata_from_predefined_entity_data('comment', $menu_item['page_arguments'][0]);
      break;

    case 'user_view_page':
      $page_metadata = noticeme_get_metadata_from_predefined_entity_data('user', $menu_item['page_arguments'][0]);
      break;

    default:
      $page_metadata = array();
  }
  return $page_metadata;
}

/**
 * Build social media metadata out of predefined entity types.
 *
 * Builds metadata for the entity types node, comment and user by using data
 * stored in the entity (like node title, image fields,...).
 *
 * @param $entity_type
 *   The entity's type
 *
 * @param $entity
 *   The entity for which we extract social media metadata.
 *
 * @return array
 *   An associative array containing social media metadata.
 *   See noticeme_get_metadata_from_entity_noticeme_field() for details.
 */
function noticeme_get_metadata_from_predefined_entity_data($entity_type, $entity) {
  $metadata = array();
  switch ($entity_type) {
    case 'node':
      $metadata['title'] = $entity->title;
      if ($items = field_get_items('node', $entity, 'field_image')) {
        $metadata['image'] = file_create_url($items[0]['uri']);
      }
      if ($items = field_get_items('node', $entity, 'body')) {
        if (array_key_exists('safe_summary', $items[0])) {
          if (drupal_strlen(trim($items[0]['safe_summary'])) > 0) {
            $metadata['description'] = drupal_html_to_text($items[0]['safe_summary']);
          }
          elseif (drupal_strlen(trim($items[0]['safe_value'])) > 0) {
            $metadata['description'] = drupal_html_to_text($items[0]['safe_value']);
          }
        }
      }
      $metadata['og_type'] = 'article';
      $metadata['schema_type'] = 'Article';
      break;

    case 'comment':
      $metadata['title'] = $entity->subject;
      if ($items = field_get_items('comment', $entity, 'comment_body')) {
        $metadata['description'] = drupal_html_to_text($items[0]['safe_value']);
      }
      $metadata['og_type'] = 'article';
      $metadata['schema_type'] = 'Article';
      break;

    case 'user':
      $metadata['title'] = $account->name;
      $metadata['og_type'] = 'website';
      $metadata['schema_type'] = 'Person';
      break;
  }
  return $metadata;
}

/*
 * Builds social media metadata from a noticeme field.
 *
 * Builds metadata by getting it from a noticeme field which is attached to the entity
 * type we're displaying on the current page.
 *
 * @param $menu_item
 *   The current page's menu router item
 *
 * @return
 *   An array with global social media metadata.
 *   See noticeme_get_metadata_from_entity_noticeme_field() for details.
 */
function noticeme_field_metadata($menu_item) {
  switch($menu_item['page_callback']) {
    case 'node_page_view':
      $metadata = noticeme_get_metadata_from_entity_noticeme_field('node',$menu_item['page_arguments'][0]);
      break;

    case 'comment_permalink':
      $metadata = noticeme_get_metadata_from_entity_noticeme_field('comment', $menu_item['page_arguments'][0]);
      break;

    case 'user_view_page':
      $metadata = noticeme_get_metadata_from_entity_noticeme_field('user', $menu_item['page_arguments'][0]);
      break;

    default:
      $metadata = array();
  }
  return $metadata;
}

/**
 * Gets social media metadata for a given entity's noticeme field.
 *
 * @see noticeme_page_metadata().
 *
 * @param $entity_type
 *   The given entity's type.
 *
 * @param $entity
 *   The entity for which we're looking for social media metadata.
 *
 * @return array
 *   An associative array containing:
 *   - title:       open graph title (og:title)
 *   - og_type:     open graph type (og:type)
 *   - schema_type: schema.org type (itemtype="http:/schema.org/[TYPE]")
 *   - description: open graph description (og:description)
 *   - image:       url to an image representing the current page/url
 */
function noticeme_get_metadata_from_entity_noticeme_field($entity_type, $entity) {
  if (empty($entity->type)) {
    return array();
  }
  $noticeme_field_ids = _noticeme_field_ids();

  foreach (field_info_instances($entity_type, $entity->type) as $id => $field) {
    //iterate only over noticeme fields
    if (in_array($id, $noticeme_field_ids)) {
      if ($items = field_get_items($entity_type, $entity, $id)) {
        //for all noticeme fields attached to the entity
        foreach ($items as $item) {
          //add all values set in the entity to $metadata
          foreach ($item as $key => $value) {
            if ($key == 'image' && strlen($value) > 0) {
              $file = file_load($value);
              if ($file) {
                $metadata['image'] = file_create_url($file->uri);
              }
            }
            elseif (strlen($value) > 0) {
              $metadata[$key] = $value;
            }
          }
        }
      }
    }
  }
  return $metadata;
}

/**
 * Get the ids of all noticeme fields
 */
function _noticeme_field_ids() {
  $ids = array();
  $info = field_info_fields();
  foreach ($info as $id => $field) {
    if ($field['type'] == 'noticeme') {
      $ids[] = $id;
    }
  }
  return $ids;
}
